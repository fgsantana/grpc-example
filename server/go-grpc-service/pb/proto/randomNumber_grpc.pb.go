// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/randomNumber.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RandomGeneratorClient is the client API for RandomGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomGeneratorClient interface {
	GenerateRandomNumber(ctx context.Context, in *RandomRangeRequest, opts ...grpc.CallOption) (*RandomNumberResponse, error)
}

type randomGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomGeneratorClient(cc grpc.ClientConnInterface) RandomGeneratorClient {
	return &randomGeneratorClient{cc}
}

func (c *randomGeneratorClient) GenerateRandomNumber(ctx context.Context, in *RandomRangeRequest, opts ...grpc.CallOption) (*RandomNumberResponse, error) {
	out := new(RandomNumberResponse)
	err := c.cc.Invoke(ctx, "/pb.RandomGenerator/GenerateRandomNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RandomGeneratorServer is the server API for RandomGenerator service.
// All implementations must embed UnimplementedRandomGeneratorServer
// for forward compatibility
type RandomGeneratorServer interface {
	GenerateRandomNumber(context.Context, *RandomRangeRequest) (*RandomNumberResponse, error)
	mustEmbedUnimplementedRandomGeneratorServer()
}

// UnimplementedRandomGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedRandomGeneratorServer struct {
}

func (UnimplementedRandomGeneratorServer) GenerateRandomNumber(context.Context, *RandomRangeRequest) (*RandomNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRandomNumber not implemented")
}
func (UnimplementedRandomGeneratorServer) mustEmbedUnimplementedRandomGeneratorServer() {}

// UnsafeRandomGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomGeneratorServer will
// result in compilation errors.
type UnsafeRandomGeneratorServer interface {
	mustEmbedUnimplementedRandomGeneratorServer()
}

func RegisterRandomGeneratorServer(s grpc.ServiceRegistrar, srv RandomGeneratorServer) {
	s.RegisterService(&RandomGenerator_ServiceDesc, srv)
}

func _RandomGenerator_GenerateRandomNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomGeneratorServer).GenerateRandomNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RandomGenerator/GenerateRandomNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomGeneratorServer).GenerateRandomNumber(ctx, req.(*RandomRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RandomGenerator_ServiceDesc is the grpc.ServiceDesc for RandomGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RandomGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RandomGenerator",
	HandlerType: (*RandomGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRandomNumber",
			Handler:    _RandomGenerator_GenerateRandomNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/randomNumber.proto",
}
